<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>tailwincss 使用攻略</title>
      <link href="/chenyp-01/2024/06/02/tail_win_css/"/>
      <url>/chenyp-01/2024/06/02/tail_win_css/</url>
      
        <content type="html"><![CDATA[<h2 id="1-tailwincss-使用攻略"><a href="#1-tailwincss-使用攻略" class="headerlink" title="1.tailwincss 使用攻略"></a>1.tailwincss 使用攻略</h2><p>1.1 插件安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add tailwindcss postcss autoprefixer</span><br><span class="line">npx tailwindcss init -p</span><br></pre></td></tr></table></figure><p>2.调整 tailwind.config.js 中 content 的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">content: [</span><br><span class="line">    &quot;./index.html&quot;,</span><br><span class="line">    &quot;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&quot;,</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>3.根样式文件引入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@tailwind base;</span><br><span class="line">@tailwind components;</span><br><span class="line">@tailwind utilities;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端基础要点</title>
      <link href="/chenyp-01/2024/05/23/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/chenyp-01/2024/05/23/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="1-不同的生产环境部署"><a href="#1-不同的生产环境部署" class="headerlink" title="1.不同的生产环境部署"></a>1.不同的生产环境部署</h3><p>解决不同生产环境的上线地址问题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.根文件html文件</span><br><span class="line">&lt;script src=&quot;%VITE_APP_BASE%config.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">2.所有的这个.env环境变量文件增加属性</span><br><span class="line">VITE_APP_BASE = &quot;/data-registry/&quot;</span><br><span class="line"></span><br><span class="line">3.viteconfig文件</span><br><span class="line">import &#123; defineConfig, loadEnv &#125; from &#x27;vite&#x27;;</span><br><span class="line">import &#123; fileURLToPath, URL &#125; from &#x27;node:url&#x27;;</span><br><span class="line">import &#123; defineConfig, loadEnv &#125; from &#x27;vite&#x27;;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;;</span><br><span class="line">import VueDevTools from &#x27;vite-plugin-vue-devtools&#x27;;</span><br><span class="line">export default (&#123; mode &#125;: any) =&gt; &#123;</span><br><span class="line">  // 根据当前工作目录中的 `mode` 加载 .env 文件</span><br><span class="line">  // 设置第三个参数为 &#x27;&#x27; 来加载所有环境变量，而不管是否有 `VITE_` 前缀。</span><br><span class="line">  const env = loadEnv(mode, process.cwd());</span><br><span class="line">  let baseVal = env.VITE_APP_BASE;</span><br><span class="line">  if (baseVal === &#x27;&#x27;) &#123;</span><br><span class="line">    baseVal = &#x27;/&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  return defineConfig(&#123;</span><br><span class="line">    base: baseVal,</span><br><span class="line">    plugins: [vue(), VueDevTools()],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        &#x27;@&#x27;: fileURLToPath(new URL(&#x27;./src&#x27;, import.meta.url))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    css: &#123;</span><br><span class="line">      preprocessorOptions: &#123;</span><br><span class="line">        less: &#123;</span><br><span class="line">          additionalData:</span><br><span class="line">            &#x27;@import &quot;@/assets/styles/common.less&quot;;@import &quot;@/assets/styles/new-variables.less&quot;;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    build: &#123;</span><br><span class="line">      outDir: &#x27;dist&#x27;, // 这里配置打包输出的文件夹</span><br><span class="line">      sourcemap: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">4.package.json 文件</span><br><span class="line"> &quot;build&quot;: &quot;vite build&quot;,</span><br><span class="line">    &quot;build-kaifa&quot;: &quot;run-p  \&quot;build-only --mode kaifa &#123;@&#125;\&quot; --&quot;,</span><br><span class="line">    &quot;build-yanshi&quot;: &quot;run-p  \&quot;build-only --mode yanshi &#123;@&#125;\&quot; --&quot;,</span><br><span class="line">    &quot;build-zhongdian&quot;: &quot;run-p  \&quot;build-only --mode zhongdian &#123;@&#125;\&quot; --&quot;,</span><br></pre></td></tr></table></figure><h3 id="2-前端项目生产环境变量"><a href="#2-前端项目生产环境变量" class="headerlink" title="2.前端项目生产环境变量"></a>2.前端项目生产环境变量</h3><p>解决不同生产环境的差异性配置，例如在哪个环境需要做哪些事情</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.在public文件夹下面，新建一个config.js文件</span><br><span class="line"></span><br><span class="line">window.AppConfig = &#123;</span><br><span class="line">  ServerAddr: &#x27;http://27.115.98.190:31060&#x27;,</span><br><span class="line">  Header: &#x27;http://&#x27;,</span><br><span class="line">  Path: &#x27;&#x27;,</span><br><span class="line">  CurrentEnv: &#x27;dalian&#x27; //是否是大连环境 如果是就写 dalian 区别不同生成环境 yanshi 就是稳定环境 kaifa就是开发环境</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.配置该文件的变量类型，新建一个env.d.ts</span><br><span class="line">declare global &#123;</span><br><span class="line">  interface Window &#123;</span><br><span class="line">    AppConfig: &#123;</span><br><span class="line">      ServerAddr: string;</span><br><span class="line">      Header: string;</span><br><span class="line">      Path: string;</span><br><span class="line">      CurrentEnv:string;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  interface ImportMetaEnv &#123;</span><br><span class="line">    VITE_APP_VERSION: string;</span><br><span class="line">    VITE_API_BASE_URL: string;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.项目中通过window.AppConfig.CurrentEnv进行访问</span><br><span class="line">4.生产环境中，需要后端同时挂载配置该文件，否则不生效</span><br></pre></td></tr></table></figure><h3 id="3-前端项目生产环境变量"><a href="#3-前端项目生产环境变量" class="headerlink" title="3.前端项目生产环境变量"></a>3.前端项目生产环境变量</h3><p>解决不同生产环境的照片显示，下载文件，内外网问题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.新建一个文件，例如config.ts</span><br><span class="line">// 获取服务器地址配置</span><br><span class="line">function getServerUrl(): string &#123;</span><br><span class="line">  const config = window.AppConfig;</span><br><span class="line">  const addr = window.location.host;</span><br><span class="line"></span><br><span class="line">  // 检查是否在生产环境且配置了 ServerAddr</span><br><span class="line">  if (import.meta.env.MODE === &#x27;production&#x27; &amp;&amp; config.ServerAddr !== &#x27;&#x27;) &#123;</span><br><span class="line">    return config.ServerAddr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 开发环境或生产环境未配置 ServerAddr 时使用 VITE_API_BASE_URL</span><br><span class="line">  const defaultBaseUrl = import.meta.env.VITE_API_BASE_URL;</span><br><span class="line">  if (defaultBaseUrl) &#123;</span><br><span class="line">    return defaultBaseUrl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 如果以上都不适用，尝试使用 AppConfig 中的 Header, Path 和当前域名拼接（注意：这通常不是标准做法）</span><br><span class="line">  // 警告：这种拼接方式可能不正确，通常 URL 应该包括协议（如 http:// 或 https://）</span><br><span class="line">  // 这里假设 Header 是协议部分，如果不是，请根据实际情况调整</span><br><span class="line">  return `$&#123;config.Header || &#x27;http://&#x27;&#125;$&#123;addr&#125;$&#123;config.Path || &#x27;&#x27;&#125;`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123; getServerUrl &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vite的基础配置</title>
      <link href="/chenyp-01/2023/10/20/vite%E9%85%8D%E7%BD%AE/"/>
      <url>/chenyp-01/2023/10/20/vite%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>该配置是包含了打包配置，根目录设置，静态文件别名设置，打包环境去掉console.log 组件按需引入，配置mock，以及使用，跨域，按需引入，gzip压缩</p><h2 id="线上"><a href="#线上" class="headerlink" title="线上"></a>线上</h2><p>1.vite打包路径，打包之前是绝对定位，打包之后是相对路由，在vite.config里面配置base:”.&#x2F;“，如果不配置的话本地访问不到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base:&quot;./&quot;</span><br></pre></td></tr></table></figure><h2 id="设置根目录"><a href="#设置根目录" class="headerlink" title="设置根目录"></a>设置根目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用必须先下载node的声明文件</span><br><span class="line">yarn add --dev @types/node</span><br><span class="line">import &#123; resolve &#125; from &quot;path&quot;;</span><br><span class="line">resolve: &#123;</span><br><span class="line">    //设置别名</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &quot;@&quot;: resolve(__dirname, &#x27;src&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="静态资源设置别名-“-icon”-“-src-assets”"><a href="#静态资源设置别名-“-icon”-“-src-assets”" class="headerlink" title="静态资源设置别名 “&#x2F;icon”: “.&#x2F;src&#x2F;assets”,"></a>静态资源设置别名 “&#x2F;icon”: “.&#x2F;src&#x2F;assets”,</h2><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\1693047802327.png" alt="1693047802327"></p><h2 id="打包环境去掉打印console-log"><a href="#打包环境去掉打印console-log" class="headerlink" title="打包环境去掉打印console.log"></a>打包环境去掉打印console.log</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.先安装  npm i terser --legacy--peer-deps</span><br><span class="line">2.然后配置打包配置</span><br></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\1693049138109.png" alt="1693049138109"></p><h2 id="组件库按需引入"><a href="#组件库按需引入" class="headerlink" title="组件库按需引入"></a>组件库按需引入</h2><p>打包前是800多kb,打包后是100多</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.npm install -D unplugin-vue-components unplugin-auto-import</span><br><span class="line">2.在vite.config.引入</span><br><span class="line">import AutoImport from &#x27;unplugin-auto-import/vite&#x27;</span><br><span class="line">import Components from &#x27;unplugin-vue-components/vite&#x27;</span><br><span class="line">3.AutoImport(&#123;</span><br><span class="line">      resolvers: [ElementPlusResolver()],</span><br><span class="line">    &#125;),</span><br><span class="line">    Components(&#123;</span><br><span class="line">      resolvers: [ElementPlusResolver()],</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\1693050560206.png" alt="1693050560206"></p><h2 id="安装mock"><a href="#安装mock" class="headerlink" title="安装mock"></a>安装mock</h2><p>1.简介</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\1693051032907.png" alt="1693051032907"></p><p>1.安装   </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add mockjs vite-plugin-mock@2.9.6 -D</span><br></pre></td></tr></table></figure><p>2.vite.config.ts中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; viteMockServe &#125; from &quot;vite-plugin-mock&quot;;</span><br><span class="line">viteMockServe(&#123;</span><br><span class="line">      // default</span><br><span class="line">      mockPath: &quot;mock&quot;,</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\1693057264581.png" alt="1693057264581"></p><p>3.创建文件mock   mock文件夹一定要放在src外面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// test.ts</span><br><span class="line"></span><br><span class="line">import &#123; MockMethod &#125; from &quot;vite-plugin-mock&quot;;</span><br><span class="line">import &#123; mock &#125; from &quot;mockjs&quot;;</span><br><span class="line">var data = mock(&#123;</span><br><span class="line">  &quot;list|100&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      goods: &quot;小米&quot;,</span><br><span class="line">      price: 3000,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line">export default [</span><br><span class="line">  &#123;</span><br><span class="line">    url: &quot;/api/get&quot;,</span><br><span class="line">    method: &quot;get&quot;,</span><br><span class="line">    response: (&#123; query &#125;) =&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        code: 0,</span><br><span class="line">        data,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">] as MockMethod[];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.组件中使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">async function fn() &#123;</span><br><span class="line">  const &#123; data &#125; = await axios.get(&quot;/api/get&quot;);</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h2 id="跨域vite-config-ts中"><a href="#跨域vite-config-ts中" class="headerlink" title="跨域vite.config.ts中"></a>跨域vite.config.ts中</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">   // 配置服务器代理，实现跨域</span><br><span class="line">   proxy: &#123;</span><br><span class="line">     //所有以 &#x27;/api&#x27;为前缀的接口都转向http://localhost:8000</span><br><span class="line">     //  // http://127.0.0.1:5173/api/user</span><br><span class="line">     //  // http://localhost:8000/api/user</span><br><span class="line">     //  // http://localhost:8000/user</span><br><span class="line">     &quot;/api&quot;: &#123;</span><br><span class="line">       target: &quot;http://localhost:8000&quot;,</span><br><span class="line">       changeOrigin: true,</span><br><span class="line">       //去掉接口中的 &#x27;/api&#x27;以便和后端接口匹配</span><br><span class="line">       rewrite: (path) =&gt; path.replace(/^\/api/, &quot;&quot;),</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>env环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.定义两个文件夹</span><br><span class="line">.env.development  //生产阶段</span><br><span class="line">VITE_BASE_API=/api/get  //线下接口数据</span><br><span class="line">.env.production   //线上</span><br><span class="line">VITE_BASE_API=www.baidu.com  //线上接口数据</span><br></pre></td></tr></table></figure><h2 id="使用cdn按需引入"><a href="#使用cdn按需引入" class="headerlink" title="使用cdn按需引入"></a>使用cdn按需引入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.安装</span><br><span class="line">npm install vite-plugin-cdn-import --save-dev</span><br><span class="line">2.安装</span><br><span class="line">$ npm install element-plus --save</span><br><span class="line">3.vite.config.ts中引入</span><br><span class="line">import &#123; autoComplete, Plugin as importToCDN &#125; from &quot;vite-plugin-cdn-import&quot;;</span><br><span class="line"> importToCDN(&#123;</span><br><span class="line">      modules: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: &quot;vue&quot;,</span><br><span class="line">          var: &quot;Vue&quot;,</span><br><span class="line">          path: `https://unpkg.com/vue@next`,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: &quot;element-plus&quot;,</span><br><span class="line">          var: &quot;ElementPlus&quot;,</span><br><span class="line">          path: `https://unpkg.com/element-plus`,</span><br><span class="line">          css: &quot;https://unpkg.com/element-plus/dist/index.css&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\1693063558556.png" alt="1693063558556"></p><p>没使用之前</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\1693063675911.png" alt="1693063675911"></p><p>使用后</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\1693064251052.png" alt="1693064251052"></p><h2 id="压缩代码gzip"><a href="#压缩代码gzip" class="headerlink" title="压缩代码gzip"></a>压缩代码gzip</h2><p>1.安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vite-plugin-compression -D</span><br></pre></td></tr></table></figure><p>2.引入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import viteCompression from &quot;vite-plugin-compression&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">viteCompression(),</span><br></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\1693065147135.png" alt="1693065147135"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ts类型声明文件</title>
      <link href="/chenyp-01/2023/08/23/ts%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/"/>
      <url>/chenyp-01/2023/08/23/ts%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><h4 id="node-声明文件"><a href="#node-声明文件" class="headerlink" title="node 声明文件"></a>node 声明文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.如果 TypeScript 无法自动找到 Node.js 内置模块的类型声明，可以手动安装 `@types/node` 包。你可以使用 npm 或者 yarn 进行安装：</span><br><span class="line">npm install --save-dev @types/node</span><br><span class="line"># 或者</span><br><span class="line">yarn add --dev @types/node</span><br></pre></td></tr></table></figure><h4 id="vue-别名声明文件"><a href="#vue-别名声明文件" class="headerlink" title="vue 别名声明文件"></a>vue 别名声明文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.在 TypeScript 中，如果你想要为 Vue 组件提供类型声明文件，通常需要创建一个 `.d.ts` 文件来描述组件的类型。对于通过别名引入的组件，你可以通过在 `src` 目录下创建一个与组件文件名相同的 `.d.ts` 文件，并在其中定义组件的类型。</span><br><span class="line"></span><br><span class="line">// src/components/HelloWorld.d.ts</span><br><span class="line">declare module &#x27;*.vue&#x27; &#123;</span><br><span class="line">  import &#123; DefineComponent &#125; from &#x27;vue&#x27;;</span><br><span class="line">  const component: DefineComponent&lt;&#123;&#125;, &#123;&#125;, any&gt;;</span><br><span class="line">  export default component;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实时数据刷新</title>
      <link href="/chenyp-01/2022/10/23/mqtt%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E5%88%B7%E6%96%B0/"/>
      <url>/chenyp-01/2022/10/23/mqtt%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E5%88%B7%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.再封装好的emqtt.js中实时监听数据，数据库中数据发生变化的时候，mqtt收到信号，处理返回来的信息</span><br><span class="line">2.将返回的数据发送仓库store中进行存储</span><br><span class="line">3.组件使用watch监听仓库中数据的变化</span><br><span class="line">4.拿到数据，进行更新</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>事件总线（采用第三方插件）</title>
      <link href="/chenyp-01/2022/02/23/mitt%E5%88%9B%E5%BB%BA%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/"/>
      <url>/chenyp-01/2022/02/23/mitt%E5%88%9B%E5%BB%BA%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>1.安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i mitt  或者   yarn add mitt</span><br></pre></td></tr></table></figure><p>2.创建文件并引入 mitt 并导出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件名字 eventBus.ts</span><br><span class="line">import mitt from &quot;mitt&quot;;</span><br><span class="line">// 创建一个事件总线实例</span><br><span class="line">const eventBus = mitt();</span><br><span class="line">export default eventBus;</span><br></pre></td></tr></table></figure><p>3.使用到的组件引入该文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import eventBus from &quot;./eventBus&quot;;</span><br><span class="line">发送</span><br><span class="line">eventBus.emit(&quot;myEvent&quot;, &#123; message: &quot;Hello, EventBus!&quot; &#125;);</span><br></pre></td></tr></table></figure><p>4.其他组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听事件</span><br><span class="line">eventBus.on(&quot;myEvent&quot;, (data) =&gt; &#123;</span><br><span class="line">    console.log(&quot;Event received:&quot;, data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端常用知识点整理</title>
      <link href="/chenyp-01/2020/06/23/%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
      <url>/chenyp-01/2020/06/23/%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>该文章目前整理，递归查找树结构的数据，深拷贝数据，数组去重的一些常用姿势点，后续还会持续更新</p><h3 id="1-递归"><a href="#1-递归" class="headerlink" title="1.递归"></a>1.递归</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findOptionByValue(cascader, valueToFind) &#123;</span><br><span class="line">          for (let item of cascader) &#123;</span><br><span class="line">              if (item.value === valueToFind) &#123;</span><br><span class="line">                console.log(item)</span><br><span class="line">              &#125; else if (item.children) &#123;</span><br><span class="line">                  // 继续递归查找子级</span><br><span class="line">                  this.findOptionByValue(item.children, valueToFind)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">this.findOptionByValue(this.Cascader, val)</span><br></pre></td></tr></table></figure><h3 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2.深拷贝"></a>2.深拷贝</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deepCopy(obj) &#123;</span><br><span class="line">      return JSON.parse(JSON.stringify(obj))</span><br><span class="line">   &#125;</span><br><span class="line">this.clonedObj = this.deepCopy(this.treeTitle)</span><br></pre></td></tr></table></figure><h3 id="3-数组去重"><a href="#3-数组去重" class="headerlink" title="3.数组去重"></a>3.数组去重</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> uniqueArray = res.<span class="property">data</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, current</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (current &amp;&amp; current.<span class="property">gatewayLable</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> x = acc.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">gatewayLable</span> === current.<span class="property">gatewayLable</span>);</span><br><span class="line">    <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">      <span class="keyword">return</span> acc.<span class="title function_">concat</span>([current]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nodejs 版本过高处理方式</title>
      <link href="/chenyp-01/2020/04/23/nodejs%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/chenyp-01/2020/04/23/nodejs%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">控制台输入</span><br><span class="line">$env:NODE_OPTIONS=&quot;--openssl-legacy-provider&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端基础要点</title>
      <link href="/chenyp-01/2020/02/23/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
      <url>/chenyp-01/2020/02/23/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="该文档整理了项目中的代码规范性问题，以及前端需要安装的软件以及插件，还有前端人员所需要的常见网站，常见的-UI-组件库，项目的构建，vue3-组合式的使用，后续还会补充一些项目经常使用的知识点。"><a href="#该文档整理了项目中的代码规范性问题，以及前端需要安装的软件以及插件，还有前端人员所需要的常见网站，常见的-UI-组件库，项目的构建，vue3-组合式的使用，后续还会补充一些项目经常使用的知识点。" class="headerlink" title="该文档整理了项目中的代码规范性问题，以及前端需要安装的软件以及插件，还有前端人员所需要的常见网站，常见的 UI 组件库，项目的构建，vue3 组合式的使用，后续还会补充一些项目经常使用的知识点。"></a>该文档整理了项目中的代码规范性问题，以及前端需要安装的软件以及插件，还有前端人员所需要的常见网站，常见的 UI 组件库，项目的构建，vue3 组合式的使用，后续还会补充一些项目经常使用的知识点。</h2><h1 id="1-前端代码规范性问题"><a href="#1-前端代码规范性问题" class="headerlink" title="1.前端代码规范性问题"></a>1.前端代码规范性问题</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.函数命名规范 采用小驼峰 语义明确</span><br><span class="line">2.类名命名规范 采用 名词-语义</span><br><span class="line">3.ts 类型命名规范 采用大驼峰命名</span><br><span class="line">4.正则验证命名规范 一一导出，采用的是平常无大小写命名</span><br><span class="line">5.组件名命名规范 采用小驼峰命名</span><br><span class="line">6.hooks 命名规范 采用 use + 小驼峰命名</span><br></pre></td></tr></table></figure><h1 id="2-前端安装软件以及插件"><a href="#2-前端安装软件以及插件" class="headerlink" title="2.前端安装软件以及插件"></a>2.前端安装软件以及插件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1.vscode 插件</span><br><span class="line">https://code.visualstudio.com/</span><br><span class="line">2.vscode 插件</span><br><span class="line">2.1 chinese 中文插件</span><br><span class="line">2.2 Prettier 代码格式</span><br><span class="line">2.3 Live Server 浏览器编译</span><br><span class="line">2.4 Auto Rename Tag 自动化标签，修改一段另一端自动修改</span><br><span class="line">2.5 Easy less 预编译器</span><br><span class="line">2.6 Error Lens 错误警示</span><br><span class="line">2.7 px to rem 像素转自适应</span><br><span class="line">2.8 vue-official vue 插件</span><br><span class="line">2.9 ES7 + React react 插件</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">前端安装软件</span><br><span class="line">1.nodejs</span><br><span class="line">https://nodejs.org/en 2.谷歌浏览器</span><br><span class="line">https://www.google.cn/chrome/index.html</span><br><span class="line">3.Snipaste 截图贴图软件</span><br><span class="line">4.Typora.exe 写文档</span><br><span class="line">5.Sourcetree 项目管理工具 6.网易有道翻译 ctrl + alt + d 看全英文档不范难</span><br><span class="line">7.ToDesk || 向日葵</span><br><span class="line">8.WinRAR 打包压缩</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-前端常用网站"><a href="#3-前端常用网站" class="headerlink" title="3.前端常用网站"></a>3.前端常用网站</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1.浏览器插件 WeTab Al</span><br><span class="line">2.gitHub 镜像</span><br><span class="line">https://dgithub.xyz/search?q=vue3&amp;type=repositories</span><br><span class="line">3.CSDN</span><br><span class="line">https://www.csdn.net/</span><br><span class="line">4.vue 官方文档</span><br><span class="line">https://cn.vuejs.org/</span><br><span class="line">5.vite 官方文档</span><br><span class="line">https://cn.vitejs.dev/</span><br><span class="line">6.Ts 入门教程 vue 配合 Ts 参考官方文档</span><br><span class="line">https://ts.xcatliu.com/basics/union-types.html 7.项目进度</span><br><span class="line">https://www.teambition.com/</span><br><span class="line">8.Echarts</span><br><span class="line">https://echarts.apache.org/zh/index.html 9.蓝湖</span><br><span class="line">https://lanhuapp.com/ 10.知乎</span><br><span class="line">https://www.zhihu.com/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-常见的-UI-组件库"><a href="#4-常见的-UI-组件库" class="headerlink" title="4.常见的 UI 组件库"></a>4.常见的 UI 组件库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1.vue2</span><br><span class="line">https://element.eleme.cn/</span><br><span class="line">2.vue3</span><br><span class="line">https://element-plus.gitee.io/zh-CN/</span><br><span class="line">3.vue3</span><br><span class="line">https://2x.antdv.com/components</span><br><span class="line">4.icon 图标、</span><br><span class="line">https://www.iconfont.cn/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-项目构建"><a href="#5-项目构建" class="headerlink" title="5.项目构建"></a>5.项目构建</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1. node 版本最好是 18 版本以上推荐使用 yarn 包管理工具</span><br><span class="line">2. npm create vite@latest my_app</span><br><span class="line">3. yarn</span><br><span class="line"></span><br><span class="line"># 项目名称</span><br><span class="line"></span><br><span class="line">- mock</span><br><span class="line">- public</span><br><span class="line">- src</span><br><span class="line">  - api</span><br><span class="line">  - assets</span><br><span class="line">  - components</span><br><span class="line">  - router</span><br><span class="line">  - store</span><br><span class="line">  - view</span><br><span class="line">    - home</span><br><span class="line">      -hooks</span><br><span class="line">      -style</span><br><span class="line">      -type</span><br><span class="line">      index.vue</span><br><span class="line">    - category</span><br><span class="line">    - car</span><br><span class="line">    - my</span><br><span class="line">    - login</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="6-vue3-组合式"><a href="#6-vue3-组合式" class="headerlink" title="6.vue3 组合式"></a>6.vue3 组合式</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">vue3 组合式采用 hooks + type + style + 模板模式抒写</span><br><span class="line">下面介绍 hooks 构成 定义一个 useList 的 hooks 1.导出</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default function () &#123;</span><br><span class="line">变量</span><br><span class="line">const list = ref([]);</span><br><span class="line">方法</span><br><span class="line">const addList = async () =&gt; &#123;</span><br><span class="line">try &#123;</span><br><span class="line">const &#123; data &#125; = await axios.get(&quot;/api/get&quot;);</span><br><span class="line">list.value = data.data;</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">console.error(&quot;Error fetching data:&quot;, error);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">return &#123;</span><br><span class="line">addList,</span><br><span class="line">list,</span><br><span class="line">&#125;;</span><br><span class="line">&#125; 2.引用</span><br><span class="line">import uselist from &quot;./hooks/uselist&quot;;</span><br><span class="line">const &#123; list, addList &#125; = uselist(); 3.模板直接使用 list 变量 addList 方法</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">type 类型约束 1.定义</span><br><span class="line">export interface List &#123;</span><br><span class="line">goods: string;</span><br><span class="line">price: number;</span><br><span class="line">&#125; 2.需要的地方引入</span><br><span class="line">import &#123; List &#125; from &quot;../type/index&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="7-代码片段"><a href="#7-代码片段" class="headerlink" title="7.代码片段"></a>7.代码片段</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vscode下载插件 vue-helper</span><br><span class="line">文件-首选项-代码片段-vue-json</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;create Vue2&quot;: &#123;</span><br><span class="line">&quot;prefix&quot;: &quot;vue2&quot;,</span><br><span class="line">&quot;body&quot;: [</span><br><span class="line">&quot;&lt;template&gt;&quot;,</span><br><span class="line">&quot;  &lt;div&gt;&lt;/div&gt;&quot;,</span><br><span class="line">&quot;&lt;/template&gt;\n&quot;,</span><br><span class="line">&quot;&lt;script&gt;&quot;,</span><br><span class="line">&quot;  export default &#123;&quot;,</span><br><span class="line">&quot;    data()&#123;&quot;,</span><br><span class="line">&quot;      return&#123;&#125;&quot;,</span><br><span class="line">&quot;    &#125;,&quot;,</span><br><span class="line">&quot;    computed:&#123;&#125;,&quot;,</span><br><span class="line">&quot;    watch:&#123;&#125;,&quot;,</span><br><span class="line">&quot;    methods:&#123;&#125;,&quot;,</span><br><span class="line">&quot;    mounted()&#123;&#125;&quot;,</span><br><span class="line">&quot;    beforeDestroy()&#123;&#125;&quot;,</span><br><span class="line">&quot; &#125;&quot;,</span><br><span class="line">&quot;&lt;/script&gt;\n&quot;,</span><br><span class="line">&quot;&lt;style rel=&#x27;stylesheet/less&#x27; lang=&#x27;less&#x27; scoped&gt;&quot;,</span><br><span class="line">&quot;&lt;/style&gt;&quot;,</span><br><span class="line">],</span><br><span class="line">&quot;description&quot;: &quot;Log output to console&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;create Vue3 Setup&quot;: &#123;</span><br><span class="line">&quot;prefix&quot;: &quot;vue3&quot;,</span><br><span class="line">&quot;body&quot;: [</span><br><span class="line">&quot;&lt;template&gt;&quot;,</span><br><span class="line">&quot;  &lt;div&gt;&lt;/div&gt;&quot;,</span><br><span class="line">&quot;&lt;/template&gt;\n&quot;,</span><br><span class="line">&quot;&lt;script lang=ts setup&gt;&quot;,</span><br><span class="line">&quot;&lt;/script&gt;\n&quot;,</span><br><span class="line">&quot;&lt;style rel=&#x27;stylesheet/sass&#x27; lang=&#x27;sass&#x27; scoped&gt;&quot;,</span><br><span class="line">&quot;&lt;/style&gt;&quot;</span><br><span class="line">],</span><br><span class="line">&quot;description&quot;: &quot;Log output to console&quot;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
